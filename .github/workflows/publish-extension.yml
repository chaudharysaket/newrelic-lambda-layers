name: Publish Extension Layer

on:
  push:
    tags:
      - v**_extension

jobs:
  publish-extension:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.12 ]
    steps:
      - uses: actions/checkout@v4
      - name: Check Tag
        id: extension-check-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v[0-9]+(\.[0-9]+)*_extension$ ]]; then
              echo "match=true" >> $GITHUB_OUTPUT
              echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
      - name: Install publish dependencies
        if: steps.extension-check-tag.outputs.match == 'true'
        run: pip install -U awscli
      - name: Publish extension layer
        if: steps.extension-check-tag.outputs.match == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd extension
          output=$(./publish-layer.sh)
          echo "$output"
          echo "LAYER_ARN=$(echo $output | grep 'ARN' | cut -d' ' -f2)" >> $GITHUB_ENV
          echo "REGION=$(echo $output | grep 'Region' | cut -d' ' -f2)" >> $GITHUB_ENV
      - name: Create Release
        if: steps.extension-check-tag.outputs.match == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          file=/tmp/somefile.zip
          echo "Uploading $file to release $TAG"
          gh release upload "$TAG" "$file"
          # Fetch the existing release notes (if necessary)
          existing_notes=$(gh release view "$TAG" --json body -q .body)
          # Define new notes or modify the existing ones
          new_notes="Updated notes here. Previous notes:\n$existing_notes"
          # Update the release with new notes
          gh release edit "$TAG" --notes "$new_notes"
